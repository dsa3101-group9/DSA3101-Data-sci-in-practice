{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XRMtMUokFKSK"},"source":["## 1.1 Import Required Packages\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"CYMZDT4MFNmK","executionInfo":{"status":"error","timestamp":1601692159192,"user_tz":-480,"elapsed":2054,"user":{"displayName":"luzhihao_@hotmail.com","photoUrl":"","userId":"07445242552833034521"}},"outputId":"a67968f8-9c97-47da-c41b-cc0ee6060ac6","colab":{"base_uri":"https://localhost:8080/","height":456}},"source":["import pandas as pd\n","import numpy as np\n","from scipy import stats \n","from random import sample, seed\n","from math import isnan\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.cluster import KMeans\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import NearestNeighbors  \n","\n","from yellowbrick.cluster import silhouette_visualizer #Plot Silhouette plot\n","\n","from mlxtend.frequent_patterns import apriori #Function for the apriori algorithm\n","from mlxtend.frequent_patterns import association_rules #Function for finding association rules"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.metrics.classification module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.metrics. Anything that cannot be imported from sklearn.metrics is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"],"name":"stderr"},{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-120a44ad172b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mneighbors\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mNearestNeighbors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0myellowbrick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcluster\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msilhouette_visualizer\u001b[0m \u001b[0;31m#Plot Silhouette plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmlxtend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrequent_patterns\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mapriori\u001b[0m \u001b[0;31m#Function for the apriori algorithm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'silhouette_visualizer'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"iYe5DGOxE7m7"},"source":["## 1.2. Import Data  \n","### For teaching team  \n","\n","**Please change the `location` variable to your desired directory to read in hackathon files.**"]},{"cell_type":"code","metadata":{"id":"rLjCy282EHee","executionInfo":{"status":"ok","timestamp":1600866578458,"user_tz":-480,"elapsed":26382,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"c87f8acf-622a-4564-d4df-b9c298c1cbd6","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# please change your desired directory here\n","location = '/content/drive/My Drive/DSA3101 Group 9/data/'"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7JulspxLE2f9"},"source":["# run the mount drive below\n","# put the data folder on the root directory of your google drive\n","df_catinfo = pd.read_csv(location + 'DSA3101_Hackathon_Categories_Information.csv')\n","df_hackdata= pd.read_csv(location + 'DSA3101_Hackathon_Data.csv', parse_dates=['Date'])\n","\n","df_paneldemo = pd.read_excel(location + 'DSA3101_Hackathon_Panelists_Demographics.xlsx')\n","df_paneldemo['Ethnic'] = df_paneldemo.Ethnicity.apply(lambda x: x.split(\" \")[-1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UEfkVo15FX0R"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"30OpgEmqFjKw"},"source":["## Data Transformation  \n","\n","This segment transforms the panel demographic data's ordinal categories into numerical levels, so that it is easier to conduct classification analysis on the data.  "]},{"cell_type":"markdown","metadata":{"id":"fk_-gm_DKCve"},"source":["Let's first take a look at the unique values of the panel demographics.  "]},{"cell_type":"code","metadata":{"id":"GTHVJ8vwF5a5","executionInfo":{"status":"ok","timestamp":1600869332586,"user_tz":-480,"elapsed":693,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"9f46b0a5-ab06-42f5-fb07-f6ba41476054","colab":{"base_uri":"https://localhost:8080/","height":506}},"source":["df_panel_cats = df_paneldemo.apply(lambda x: pd.Series(x.unique()[0:12]), axis = 0).fillna('').iloc[:,1:]\n","df_panel_cats"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BMI</th>\n","      <th>Income</th>\n","      <th>Ethnicity</th>\n","      <th>Lifestage</th>\n","      <th>Strata</th>\n","      <th>#HH</th>\n","      <th>location</th>\n","      <th>Ethnic</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Obese</td>\n","      <td>Income 1500 - 1999</td>\n","      <td>North Malay</td>\n","      <td>Empty Nesters</td>\n","      <td>Urban</td>\n","      <td>1-3 Member HH</td>\n","      <td>North</td>\n","      <td>Malay</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Healthy</td>\n","      <td>Income &lt; 1500</td>\n","      <td>North Chinese</td>\n","      <td>Teens Aches</td>\n","      <td>Rural</td>\n","      <td>4 Member HH</td>\n","      <td>South</td>\n","      <td>Chinese</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Over Weight</td>\n","      <td>Income 2000 - 2999</td>\n","      <td>North Others</td>\n","      <td>Nesting Families</td>\n","      <td></td>\n","      <td>7+ Member HH</td>\n","      <td>East Coast</td>\n","      <td>Others</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Under Weight</td>\n","      <td>Income 4000 - 4999</td>\n","      <td>South Malay</td>\n","      <td>Teens and Toddlers</td>\n","      <td></td>\n","      <td>5 Member HH</td>\n","      <td>Central</td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Not Available</td>\n","      <td>Income 3000 - 3999</td>\n","      <td>East Coast Malay</td>\n","      <td>Matured Families</td>\n","      <td></td>\n","      <td>6 Member HH</td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td></td>\n","      <td>Income &gt;5000</td>\n","      <td>Central Malay</td>\n","      <td>Yankys</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td></td>\n","      <td></td>\n","      <td>Central Others</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td></td>\n","      <td></td>\n","      <td>Central Chinese</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td></td>\n","      <td></td>\n","      <td>South Chinese</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td></td>\n","      <td></td>\n","      <td>South Others</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td></td>\n","      <td></td>\n","      <td>East Coast Chinese</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td></td>\n","      <td></td>\n","      <td>East Coast Others</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              BMI              Income  ...    location   Ethnic\n","0           Obese  Income 1500 - 1999  ...       North    Malay\n","1         Healthy       Income < 1500  ...       South  Chinese\n","2     Over Weight  Income 2000 - 2999  ...  East Coast   Others\n","3    Under Weight  Income 4000 - 4999  ...     Central         \n","4   Not Available  Income 3000 - 3999  ...                     \n","5                        Income >5000  ...                     \n","6                                      ...                     \n","7                                      ...                     \n","8                                      ...                     \n","9                                      ...                     \n","10                                     ...                     \n","11                                     ...                     \n","\n","[12 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"OV09VMoAPD3N"},"source":["There are two options for transformation:  \n","\n","Convert to **numerical levels** if there is a natural order presence in the categories or its a binary option:  \n","* BMI  \n","* Income\n","* Strata  \n","* #HH (household size)  \n","\n","Convert using **One-Hot** Encoding if there is no obvious order or difference in category is hard to justify:  \n","* Lifestage\n","* Location \n","* Ethnic"]},{"cell_type":"code","metadata":{"id":"2h9lFTwmKQb9","executionInfo":{"status":"ok","timestamp":1600871270768,"user_tz":-480,"elapsed":819,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"0619d937-ba2e-44ac-c8e0-bc07711c93df","colab":{"base_uri":"https://localhost:8080/","height":326}},"source":["dict_bmi = dict(zip(df_panel_cats.BMI[df_panel_cats.BMI != ''].tolist(),\n","               (1, 4, 2, 3, 0)))\n","dict_income = dict(zip(df_panel_cats.Income[df_panel_cats.Income != ''].tolist(),\n","               (1750, 1000, 2500, 4500, 3500, 5500)))\n","dict_strata = dict(zip(df_panel_cats.Strata[df_panel_cats.Strata != ''].tolist(),\n","               (0, 1)))\n","dict_hh = dict(zip(df_panel_cats['#HH'][df_panel_cats['#HH'] != ''].tolist(),\n","               (2, 4, 7, 5, 6)))\n","\n","def convert_with_dict(dict_):\n","  def convertor(x):\n","    return dict_[x]\n","  return convertor\n","\n","df_panelconvert = df_paneldemo.copy()\n","\n","# numerical levels\n","df_panelconvert['BMI'] = df_panelconvert.BMI.apply(convert_with_dict(dict_bmi))\n","df_panelconvert['Income'] = df_panelconvert.Income.apply(convert_with_dict(dict_income))\n","df_panelconvert['Strata'] = df_panelconvert.Strata.apply(convert_with_dict(dict_strata))\n","df_panelconvert['#HH'] = df_panelconvert[\"#HH\"].apply(convert_with_dict(dict_hh))\n","\n","# One-Hot conversion\n","onehot_lifestage = pd.get_dummies(df_panelconvert.Lifestage, prefix='Lifestage')\n","df_panelconvert[onehot_lifestage.columns.tolist()] = onehot_lifestage\n","\n","onehot_location = pd.get_dummies(df_panelconvert.location, prefix='location')\n","df_panelconvert[onehot_location.columns.tolist()] = onehot_location\n","\n","onehot_ethnic = pd.get_dummies(df_panelconvert.Ethnic, prefix='ethnic')\n","df_panelconvert[onehot_ethnic.columns.tolist()] = onehot_ethnic\n","\n","# removing unncessary columns\n","df_panelconvert.drop(['Lifestage', 'Ethnicity', 'location', 'Ethnic'], axis=1, inplace=True)\n","\n","df_panelconvert.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>BMI</th>\n","      <th>Income</th>\n","      <th>Strata</th>\n","      <th>#HH</th>\n","      <th>Lifestage_Empty Nesters</th>\n","      <th>Lifestage_Matured Families</th>\n","      <th>Lifestage_Nesting Families</th>\n","      <th>Lifestage_Teens Aches</th>\n","      <th>Lifestage_Teens and Toddlers</th>\n","      <th>Lifestage_Yankys</th>\n","      <th>location_Central</th>\n","      <th>location_East Coast</th>\n","      <th>location_North</th>\n","      <th>location_South</th>\n","      <th>ethnic_Chinese</th>\n","      <th>ethnic_Malay</th>\n","      <th>ethnic_Others</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Panel 101011101</td>\n","      <td>1</td>\n","      <td>1750</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Panel 101016101</td>\n","      <td>4</td>\n","      <td>1750</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Panel 101019101</td>\n","      <td>1</td>\n","      <td>1000</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Panel 101024101</td>\n","      <td>2</td>\n","      <td>1750</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Panel 105009103</td>\n","      <td>2</td>\n","      <td>1000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                ID  BMI  Income  ...  ethnic_Chinese  ethnic_Malay  ethnic_Others\n","0  Panel 101011101    1    1750  ...               0             1              0\n","1  Panel 101016101    4    1750  ...               0             1              0\n","2  Panel 101019101    1    1000  ...               0             1              0\n","3  Panel 101024101    2    1750  ...               1             0              0\n","4  Panel 105009103    2    1000  ...               0             1              0\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"U2O1FgQZYnt1"},"source":["## K-means\n","\n","Apply K-means on the numerical data, attemp to identify some possible cluster that may exist."]},{"cell_type":"code","metadata":{"id":"iNx_AK-TWgHa","executionInfo":{"status":"ok","timestamp":1600872245907,"user_tz":-480,"elapsed":1675,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"07eeaa37-f3cb-47d7-fe46-44f368476097","colab":{"base_uri":"https://localhost:8080/","height":464}},"source":["wcss = []\n","max_k = 15\n","kmeans_kwargs = {\"init\" : \"random\",\n","                 \"n_init\" : 10,\n","                 \"max_iter\" : 300,\n","                 \"random_state\" : 3101,}\n","\n","dataarray = df_panelconvert.iloc[:,1:5].to_numpy()\n","\n","for k in range(1, max_k+1):\n","    kmeans = KMeans(n_clusters=k, **kmeans_kwargs)\n","    kmeans.fit(dataarray)\n","    wcss.append(kmeans.inertia_)\n","\n","sns.set(font_scale = 1)\n","plt.figure(figsize=(10, 7)) \n","plt.plot(range(1, max_k+1), wcss,linestyle='--', marker='o', color='b',linewidth=1)\n","plt.xticks(range(1, max_k+1))\n","plt.title('Scatterplot of Total WCSS vs K')\n","plt.xlabel(\"Number of Clusters\")\n","plt.ylabel(\"Total WCSS\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x504 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ttgwe_feaMVQ"},"source":["### Optimal Number of Clusters  \n","\n","By looking at the elbow diagram, the optimal number of clusters might be either 2 or 3. We will conduct further analysis to identify the optimal number of clusters.  "]},{"cell_type":"code","metadata":{"id":"5vJLZr0naMDp","executionInfo":{"status":"ok","timestamp":1600872452688,"user_tz":-480,"elapsed":900,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"1398e21b-a105-4e2b-bd12-77f5a3d6315d","colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["kmeans2 = KMeans(init=\"random\",n_clusters =2 , n_init = 10, max_iter = 300, random_state = 3101)\n","kmeans2.fit(dataarray)\n","clustergroups2 = kmeans2.labels_ #The cluster number for each row  \n","\n","Clustercenters2 = pd.DataFrame(kmeans2.cluster_centers_) #Dataframe of cluster centers\n","Clustercenters2.rename(columns={0: \"BMI\", 1: \"Income\", 2: \"Strata\" , 3: \"HH\"},inplace=True)\n","Clustercenters2.index.name = \"Clusters\"  \n","\n","model_2 = df_panelconvert.copy()\n","model_2['Clusters'] = pd.DataFrame(clustergroups2) #Combining the column of clusters to the original dataframe\n","\n","Clustercenters2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BMI</th>\n","      <th>Income</th>\n","      <th>Strata</th>\n","      <th>HH</th>\n","    </tr>\n","    <tr>\n","      <th>Clusters</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.352981</td>\n","      <td>5217.347622</td>\n","      <td>0.107837</td>\n","      <td>4.419960</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.267667</td>\n","      <td>2287.208843</td>\n","      <td>0.218713</td>\n","      <td>4.310699</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               BMI       Income    Strata        HH\n","Clusters                                           \n","0         2.352981  5217.347622  0.107837  4.419960\n","1         2.267667  2287.208843  0.218713  4.310699"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"rtNqYDwIZZYT","executionInfo":{"status":"ok","timestamp":1600872477703,"user_tz":-480,"elapsed":756,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"fd8c72bc-fe01-4e50-e0c1-9ab37e0d3612","colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["pd.DataFrame(model_2.groupby('Clusters').BMI.count())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BMI</th>\n","    </tr>\n","    <tr>\n","      <th>Clusters</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1493</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2533</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           BMI\n","Clusters      \n","0         1493\n","1         2533"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"oMe8HjMHbwRX","executionInfo":{"status":"error","timestamp":1600872639376,"user_tz":-480,"elapsed":864,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"b056d730-1cb1-491d-f3c0-565516eacece","colab":{"base_uri":"https://localhost:8080/","height":266}},"source":["model = KMeans(2, random_state=3101)\n","plt.figure(figsize=(10, 7)) \n","sns.set(font_scale = 1)\n","silhouette_visualizer(model, dataarray, colors='yellowbrick')\n","print(\"For n_clusters = 2 The average silhouette_score is: \" + str(silhouette_score(dataarray, model.labels_,metric = 'euclidean')))\n","#The dotted line in the plot represents the Average Silhouette Width for K = 3"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-8d5ce446c0f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfont_scale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0msilhouette_visualizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'yellowbrick'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"For n_clusters = 2 The average silhouette_score is: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msilhouette_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmetric\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'euclidean'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#The dotted line in the plot represents the Average Silhouette Width for K = 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'silhouette_visualizer' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"95z2IRMKcARQ","executionInfo":{"status":"ok","timestamp":1600872805540,"user_tz":-480,"elapsed":977,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"fc68a946-9282-4b34-aa86-af32025c4b2f","colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["kmeans3 = KMeans(init=\"random\",n_clusters =3 , n_init = 10, max_iter = 300, random_state = 3101)\n","kmeans3.fit(dataarray)\n","clustergroups3 = kmeans3.labels_ #The cluster number for each row  \n","\n","Clustercenters3 = pd.DataFrame(kmeans3.cluster_centers_) #Dataframe of cluster centers\n","Clustercenters3.rename(columns={0: \"BMI\", 1: \"Income\", 2: \"Strata\" , 3: \"HH\"},inplace=True)\n","Clustercenters3.index.name = \"Clusters\"  \n","\n","model_3 = df_panelconvert.copy()\n","model_3['Clusters'] = pd.DataFrame(clustergroups3) #Combining the column of clusters to the original dataframe\n","\n","\n","Clustercenters3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BMI</th>\n","      <th>Income</th>\n","      <th>Strata</th>\n","      <th>HH</th>\n","    </tr>\n","    <tr>\n","      <th>Clusters</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.352981</td>\n","      <td>5217.347622</td>\n","      <td>0.107837</td>\n","      <td>4.419960</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.318533</td>\n","      <td>1330.115830</td>\n","      <td>0.266409</td>\n","      <td>4.239382</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.232465</td>\n","      <td>2949.565798</td>\n","      <td>0.185705</td>\n","      <td>4.360053</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               BMI       Income    Strata        HH\n","Clusters                                           \n","0         2.352981  5217.347622  0.107837  4.419960\n","1         2.318533  1330.115830  0.266409  4.239382\n","2         2.232465  2949.565798  0.185705  4.360053"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"Wgba6p_RcrE_","executionInfo":{"status":"ok","timestamp":1600872805541,"user_tz":-480,"elapsed":933,"user":{"displayName":"shao min liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWHh3qNlr4G6RU65irU4NRtl9yhcXuEuBuWOev3Q=s64","userId":"05414002776904702266"}},"outputId":"118ce0e8-b439-48ae-cd3a-100fa3283220","colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["pd.DataFrame(model_3.groupby('Clusters').BMI.count())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BMI</th>\n","    </tr>\n","    <tr>\n","      <th>Clusters</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1493</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1036</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1497</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           BMI\n","Clusters      \n","0         1493\n","1         1036\n","2         1497"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"id":"chfOhhLTc90t"},"source":[""],"execution_count":null,"outputs":[]}]}